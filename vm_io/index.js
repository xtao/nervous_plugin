// Generated by CoffeeScript 1.4.0
(function() {
  var child_process;

  child_process = require('child_process');

  module.exports = function(axon) {
    var INTERVAL, dtrace_io_cmd, iod, parse_vmadm, vmadm_cmd;
    dtrace_io_cmd = "/zones/stdyun/bin/dtrace-io.bash";
    vmadm_cmd = "vmadm list -p -o pid,alias state=running";
    INTERVAL = 5;
    iod = child_process.spawn(dtrace_io_cmd);
    parse_vmadm = function(vmadm) {
      var alias, items, line, pid, vmadm_map, _i, _len, _ref;
      vmadm_map = {};
      _ref = vmadm.split('\n');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        line = line.trim();
        if (line) {
          items = line.split(":");
          pid = items[0];
          alias = items[1];
          vmadm_map[pid] = alias;
        }
      }
      return vmadm_map;
    };
    return iod.stdout.on('data', function(io_data) {
      return child_process.exec(vmadm_cmd, function(err, vmadm_out, stderr) {
        var alias, flag, items, line, lines, value, vmadm_map, _i, _len, _results;
        lines = io_data.toString().split('\n');
        vmadm_map = parse_vmadm(vmadm_out);
        _results = [];
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          line = line.trim();
          if (line) {
            items = line.split(" ");
            alias = vmadm_map[items[1]];
            if (alias) {
              alias = alias.replace(/\ /g, "").replace(/\./g, "_");
              flag = items[items.length - 2];
              value = Math.floor(items[items.length - 1] / INTERVAL);
              if (flag === "R") {
                _results.push(axon.emit('data', alias + "." + "read", value));
              } else {
                _results.push(axon.emit('data', alias + "." + "write", value));
              }
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    });
  };

}).call(this);
